#!/bin/bash

# Common functions for Manjaro Install Framework

# kernel_cmdline <param> <default>
# Looks for a parameter on the kernel's boot-time command line.
#
# returns: 0 if param was found. Also prints its value if it was a K=V param.
#          1 if it was not. Also prints value passed as <default>
#
kernel_cmdline ()
{
    for param in $(/bin/cat /proc/cmdline); do
        case "${param}" in
            $1=*) echo "${param##*=}"; return 0 ;;
            $1) return 0 ;;
            *) continue ;;
        esac
    done
    [ -n "${2}" ] && echo "${2}"
    return 1
}

DIALOG() {
   # parameters: see dialog(1)
   # returns: whatever dialog did
   dialog --backtitle "$TITLE" --aspect 15 --yes-label "$_yes" --no-label "$_no" --cancel-label "$_cancel" "$@"
   return $?
}

# chroot_mount()
# prepares target system as a chroot
#
chroot_mount()
{
    [[ -e "${DESTDIR}/sys" ]] || mkdir -m 555 "${DESTDIR}/sys"
    [[ -e "${DESTDIR}/proc" ]] || mkdir -m 555 "${DESTDIR}/proc"
    [[ -e "${DESTDIR}/dev" ]] || mkdir "${DESTDIR}/dev"
    mount -t sysfs sysfs "${DESTDIR}/sys"
    mount -t proc proc "${DESTDIR}/proc"
    mount -o bind /dev "${DESTDIR}/dev"
    chmod 555 "${DESTDIR}/sys"
    chmod 555 "${DESTDIR}/proc"
}

# chroot_umount()
# tears down chroot in target system
#
chroot_umount()
{
    umount "${DESTDIR}/proc"
    umount "${DESTDIR}/sys"
    umount "${DESTDIR}/dev"
}

# _getdisccapacity()
#
# parameters: device file
# outputs:    disc capacity in bytes
_getdisccapacity()
{
 echo $(fdisk -l $1 | grep $1: | cut -d" " -f5)
}

# Get a list of available disks for use in the "Available disks" dialogs. This
# will print the disks as follows, getting size info from _getdisccapacity():
#   /dev/sda: 625000 MiB (610 GiB)
#   /dev/sdb: 476940 MiB (465 GiB)
_getavaildisks()
{
    for DISC in $(finddisks); do
        DISC_SIZE=$(_getdisccapacity $DISC)
        echo "$DISC: $((DISC_SIZE / 2**20)) MiB ($((DISC_SIZE / 2**30)) GiB)\n"
    done
}

getfstype()
{
    echo "$(${_BLKID} -p -i -s TYPE -o value ${1})"
}

# getfsuuid()
# converts /dev devices to FSUUIDs
#
# parameters: device file
# outputs:    FSUUID on success
#             nothing on failure
# returns:    nothing
getfsuuid()
{
    echo "$(${_BLKID} -p -i -s UUID -o value ${1})"
}

# getuuid()
# converts /dev/[hs]d?[0-9] devices to UUIDs
#
# parameters: device file
# outputs:    UUID on success
#             nothing on failure
# returns:    nothing
getuuid()
{
    if [ -n "$(echo ${1} |grep -E '[shv]d[a-z]+[0-9]+$|mmcblk[0-9]+p[0-9]+$')" ]; then
        echo "$(blkid -s UUID -o value ${1})"
    fi
}

# parameters: device file
# outputs:    LABEL on success
#             nothing on failure
# returns:    nothing
getfslabel()
{
    echo "$(${_BLKID} -p -i -s LABEL -o value ${1})"
}

getpartuuid()
{
    echo "$(${_BLKID} -p -i -s PART_ENTRY_UUID -o value ${1})"
}

getpartlabel()
{
    echo "$(${_BLKID} -p -i -s PART_ENTRY_NAME -o value ${1})"
}

set_alsa ()
{
#set_alsa
    # amixer binary
    local alsa_amixer="/usr/bin/amixer"

    # enable all known (tm) outputs
    $alsa_amixer -c 0 sset "Master" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Front" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Side" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Surround" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Center" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "LFE" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Headphone" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Speaker" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "PCM" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Line" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "External" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "FM" 50% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Master Mono" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Master Digital" 70% unmute &>/dev/null
    $alsa_amixer -c 0 sset "Analog Mix" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Aux" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Aux2" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM Center" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM Front" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM LFE" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM Side" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM Surround" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Playback" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "PCM,1" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "DAC" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "DAC,0" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "DAC,0" -12dB &> /dev/null
    $alsa_amixer -c 0 sset "DAC,1" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "DAC,1" -12dB &> /dev/null
    $alsa_amixer -c 0 sset "Synth" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "CD" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Wave" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Music" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "AC97" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "Analog Front" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "VIA DXS,0" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "VIA DXS,1" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "VIA DXS,2" 70% unmute &> /dev/null
    $alsa_amixer -c 0 sset "VIA DXS,3" 70% unmute &> /dev/null

    # set input levels
    $alsa_amixer -c 0 sset "Mic" 70% mute &>/dev/null
    $alsa_amixer -c 0 sset "IEC958" 70% mute &>/dev/null

    # special stuff
    $alsa_amixer -c 0 sset "Master Playback Switch" on &>/dev/null
    $alsa_amixer -c 0 sset "Master Surround" on &>/dev/null
    $alsa_amixer -c 0 sset "SB Live Analog/Digital Output Jack" off &>/dev/null
    $alsa_amixer -c 0 sset "Audigy Analog/Digital Output Jack" off &>/dev/null
}

_configure_translation_pkgs()
{
    # Determind which language we are using
    local LNG_INST=$(cat ${DESTDIR}/etc/locale.conf | grep LANG= | cut -d= -f2 | cut -d. -f1)

    [ -n "$LNG_INST" ] || LNG_INST="en"
    case "$LNG_INST" in
                     be_BY)
                           #Belarusian
                           PACMAN_LNG_INST="firefox-i18n-be thunderbird-i18n-be libreoffice-be"
                           ;;
                     bg_BG)
                           #Bulgarian
                           PACMAN_LNG_INST="firefox-i18n-bg thunderbird-i18n-bg libreoffice-bg"
                           PACMAN_LNG_INST_KDE="kde-l10n-bg"
                           ;;
                     de*)
                           #German
                           PACMAN_LNG_INST="firefox-i18n-de thunderbird-i18n-de hunspell-de libreoffice-de"
                           PACMAN_LNG_INST_KDE="kde-l10n-de"
                           ;;
                     en*)
                           #English
                           PACMAN_LNG_INST="hunspell-en libreoffice-en-US"
                           ;;
                     en_GB)
                           #British English
           PACMAN_LNG_INST="firefox-i18n-en-gb thunderbird-i18n-en-gb libreoffice-en-GB hunspell-en"
                           ;;
                     es*)
                           #Espanol
                           PACMAN_LNG_INST="firefox-i18n-es-es thunderbird-i18n-es-es hunspell-es libreoffice-es"
                           PACMAN_LNG_INST_KDE="kde-l10n-es"
                           ;;
                     es_AR)
                           #Espanol (Argentina)
                           PACMAN_LNG_INST="firefox-i18n-es-ar thunderbird-i18n-es-ar hunspell-es libreoffice-es"
                           PACMAN_LNG_INST_KDE="kde-l10n-es"
                           ;;
                     fr*)
                           #Francais
                           PACMAN_LNG_INST="firefox-i18n-fr thunderbird-i18n-fr hunspell-fr libreoffice-fr"
                           PACMAN_LNG_INST_KDE="kde-l10n-fr"
                           ;;
                     it*)
                           #Italian
                           PACMAN_LNG_INST="firefox-i18n-it thunderbird-i18n-it hunspell-it libreoffice-it"
                           PACMAN_LNG_INST_KDE="kde-l10n-it"
                           ;;
                     pl_PL)
                           #Polish
                           PACMAN_LNG_INST="firefox-i18n-pl thunderbird-i18n-pl hunspell-pl libreoffice-pl"
                           PACMAN_LNG_INST_KDE="kde-l10n-pl"
                           ;;
                     pt_BR)
                           #Brazilian Portuguese
                           PACMAN_LNG_INST="firefox-i18n-pt-br thunderbird-i18n-pt-br libreoffice-pt-BR"
                           PACMAN_LNG_INST_KDE="kde-l10n-pt_br"
                           ;;
                     pt_PT)
                           #Portuguese
                           PACMAN_LNG_INST="firefox-i18n-pt-pt thunderbird-i18n-pt-pt libreoffice-pt"
                           PACMAN_LNG_INST_KDE="kde-l10n-pt"
                           ;;
                     ro_RO)
                           #Romanian
                           PACMAN_LNG_INST="firefox-i18n-ro thunderbird-i18n-ro hunspell-ro libreoffice-ro"
                           PACMAN_LNG_INST_KDE="kde-l10n-ro"
                           ;;
                     ru*)
                           #Russian
                           PACMAN_LNG_INST="firefox-i18n-ru thunderbird-i18n-ru libreoffice-ru"
                           PACMAN_LNG_INST_KDE="kde-l10n-ru"
                           ;;
                     sv*)
                           #Swedish
                           PACMAN_LNG_INST="firefox-i18n-sv-se thunderbird-i18n-sv-se libreoffice-sv"
                           PACMAN_LNG_INST_KDE="kde-l10n-sv"
                           ;;
                     tr*)
                           #Turkish
                           PACMAN_LNG_INST="firefox-i18n-tr thunderbird-i18n-tr libreoffice-tr"
                           PACMAN_LNG_INST_KDE="kde-l10n-tr"
                           ;;
                     uk_UA)
                           #Ukrainian
                           PACMAN_LNG_INST="firefox-i18n-uk thunderbird-i18n-uk libreoffice-uk"
                           PACMAN_LNG_INST_KDE="kde-l10n-uk"
                           ;;
    esac
}

_do_locales ()
{
    XKEYMAP=""
    XVARIANT=""
    CKEYMAP=""
    case "${KEYMAP}" in
                     en_US)
                           #Amerikan English
                           XKEYMAP="us"
                           CKEYMAP="us"
                           ;;
                     en_GB)
                           #British English
                           XKEYMAP="gb"
                           CKEYMAP="uk"
                           ;;
                     be_BY)
                           #Belarusian
                           XKEYMAP="be"
                           CKEYMAP="be"
                           ;;
                     pt_BR)
                           #Brazilian Portuguese
                           XKEYMAP="br-abnt2"
                           CKEYMAP="br-abnt2"
                           ;;
                     bg_BG)
                           #Bulgarian
                           XKEYMAP="bg"
                           CKEYMAP="bg"
                           ;;
                     da_DK)
                           #Danish
                           XKEYMAP="dk"
                           CKEYMAP="dk"
                           ;;
                     fr_BE)
                           #Belgian
                           XKEYMAP="be-latin1"
                           CKEYMAP="be-latin1"
                           ;;
                     fr_BE)
                           #Belgian
                           XKEYMAP="be-latin1"
                           CKEYMAP="be-latin1"
                           ;;
                     fr_FR)
                           #French
                           XKEYMAP="fr"
                           CKEYMAP="fr"
                           ;;
                     fr_CA)
                           #Canadian
                           XKEYMAP="cf"
                           CKEYMAP="cf"
                           ;;
                     de_DE)
                           #German
                           XKEYMAP="de"
                           XVARIANT="nodeadkeys"
                           CKEYMAP="de"
                           ;;
                     is_IS)
                           #Icelandic
                           XKEYMAP="is"
                           CKEYMAP="is"
                           ;;
                     it_IT)
                           #Italian
                           XKEYMAP="it"
                           CKEYMAP="it"
                           ;;
                     nn_NO)
                           #Nynorsk
                           XKEYMAP="no"
                           CKEYMAP="no-latin1"
                           ;;
                     pl_PL)
                           #Polish
                           XKEYMAP="pl"
                           CKEYMAP="pl"
                           ;;
                     pt_PT)
                           #Portuguese
                           XKEYMAP="pt"
                           CKEYMAP="pt"
                           ;;
                     ro_RO)
                           #Romanian
                           XKEYMAP="ro"
                           CKEYMAP="ro"
                           ;;
                     ru_RU)
                           #Russian
                           XKEYMAP="ru"
                           CKEYMAP="ru"
                           ;;
                     es_AR)
                           #Argentinian
                           XKEYMAP="la-latin1"
                           CKEYMAP="la-latin1"
                           ;;
                     es_ES)
                           #Spanish
                           XKEYMAP="es"
                           CKEYMAP="es"
                           ;;
                     sv_SE)
                           #Swedish
                           XKEYMAP="sv-latin1"
                           CKEYMAP="sv-latin1"
                           ;;
                     tr_TR)
                           #Turkish
                           XKEYMAP="tr"
                           CKEYMAP="trq"
                           ;;
                     uk_UA)
                           #Ukrainian
                           XKEYMAP="ua"
                           CKEYMAP="ua"
                           ;;
    esac
    if [ "${XVARIANT}" != "" ] ; then 
       sed -i "s#Identifier \"evdev keyboard catchall\".*#&\n        Option \"XkbLayout\" \"${XKEYMAP}\"\n        Option \"XkbVariant\" \"${XVARIANT}\"#"       ${DESTDIR}/etc/X11/xorg.conf.d/10-evdev.conf
    else
       sed -i "s#Identifier \"evdev keyboard catchall\".*#&\n        Option \"XkbLayout\" \"${XKEYMAP}\"#"       ${DESTDIR}/etc/X11/xorg.conf.d/10-evdev.conf
    fi
    sed -i -e "s/^.*KEYMAP=.*/KEYMAP=${CKEYMAP}/" ${DESTDIR}/etc/vconsole.conf
}

hd_config()
{
    # initialize special directories
    rm -v -rf ${DESTDIR}/sys ${DESTDIR}/proc ${DESTDIR}/dev &>/dev/null
    mkdir -p -v -m 1777 ${DESTDIR}/tmp &>/dev/null
    mkdir -p -v -m 1777 ${DESTDIR}/var/tmp &>/dev/null
    mkdir -p -v ${DESTDIR}/var/log/old &>/dev/null
    mkdir -p -v ${DESTDIR}/var/lock/sane &>/dev/null
    mkdir -p -v ${DESTDIR}/var/cache/pacman/pkg &>/dev/null
    mkdir -p -v ${DESTDIR}/boot/grub &>/dev/null
    mkdir -p -v ${DESTDIR}/usr/lib/locale &>/dev/null
    mkdir -p -v ${DESTDIR}/usr/share/icons/default &>/dev/null
    mkdir -p -v ${DESTDIR}/media &>/dev/null
    mkdir -p -v ${DESTDIR}/mnt &>/dev/null
    mkdir -p -v ${DESTDIR}/sys &>/dev/null
    mkdir -p -v ${DESTDIR}/proc &>/dev/null

    # create the basic devices (/dev/{console,null,zero}) on the target
    mkdir -p -v ${DESTDIR}/dev &>/dev/null &>/dev/null
    mknod ${DESTDIR}/dev/console c 5 1 &>/dev/null
    mknod ${DESTDIR}/dev/null c 1 3 &>/dev/null
    mknod ${DESTDIR}/dev/zero c 1 5 &>/dev/null

    # adjust permissions on /tmp and /var/tmp
    chmod -v 777 ${DESTDIR}/var/tmp &>/dev/null
    chmod -v o+t ${DESTDIR}/var/tmp &>/dev/null
    chmod -v 777 ${DESTDIR}/tmp &>/dev/null
    chmod -v o+t ${DESTDIR}/tmp &>/dev/null

    # install /etc/resolv.conf
    cp -vf /etc/resolv.conf ${DESTDIR}/etc/resolv.conf &>/dev/null

    echo "install configs for root" &>/dev/null
    cp -a ${DESTDIR}/etc/skel/. ${DESTDIR}/root/ &>/dev/null

    sed -i 's/^#\(en_US.*\)/\1/' ${DESTDIR}/etc/locale.gen &>/dev/null
    
    chroot_mount

    # copy generated xorg.xonf to target
    if [ -e "/etc/X11/xorg.conf" ] ; then
        echo "copying generated xorg.conf to target"
        cp /etc/X11/xorg.conf ${DESTDIR}/etc/X11/xorg.conf &>/dev/null
    fi

    #set_alsa

    DIALOG --infobox "${_setupalsa}"  6 40
    sleep 3
    # configure alsa
    set_alsa
    # save settings
    chroot ${DESTDIR} alsactl -f /etc/asound.state store &>/dev/null

    # enable default mirror
    cp ${DESTDIR}/etc/pacman.d/mirrorlist ${DESTDIR}/etc/pacman.d/mirrorlist.backup
    sed -i -e 's~^.*repo.manjaro.org.uk.*~Server = http://repo.manjaro.org.uk/$repo/$arch~' ${DESTDIR}/etc/pacman.d/mirrorlist

    chroot ${DESTDIR} pacman -Syy &> /dev/null

    # Install xf86-video driver

    # TODO: fix in mhwd
    mkdir -p ${DESTDIR}/var/lib/mhwd/local/{pci,usb}

    if [ -e "/opt/manjaro/pacman-gfx.conf" ] ; then
       DIALOG --infobox "${_installvideodriver}"  6 40
    
       mkdir -p ${DESTDIR}/opt/manjaro
       mount -o bind /opt/manjaro ${DESTDIR}/opt/manjaro > /tmp/mount.pkgs.log
       ls ${DESTDIR}/opt/manjaro >> /tmp/mount.pkgs.log

       if  [ "${USENONFREE}" == "yes" ] || [ "${USENONFREE}" == "true" ]; then
	   if  [ "${VIDEO}" == "vesa" ]; then
           	chroot ${DESTDIR} /usr/bin/mhwd --install pci video-vesa --pmconfig "/opt/manjaro/pacman-gfx.conf" &>/dev/null
	   else
           	chroot ${DESTDIR} /usr/bin/mhwd --auto pci nonfree 0300 --pmconfig "/opt/manjaro/pacman-gfx.conf" &>/dev/null
	   fi
       else
	   if  [ "${VIDEO}" == "vesa" ]; then
           	chroot ${DESTDIR} /usr/bin/mhwd --install pci video-vesa --pmconfig "/opt/manjaro/pacman-gfx.conf" &>/dev/null
	   else
           	chroot ${DESTDIR} /usr/bin/mhwd --auto pci free 0300 --pmconfig "/opt/manjaro/pacman-gfx.conf" &>/dev/null
	   fi
       fi

       umount ${DESTDIR}/opt/manjaro
       rmdir ${DESTDIR}/opt/manjaro
    fi

    # setup systemd

    DIALOG --infobox "${_setupsystemd}" 6 40
    sleep 3

    chroot ${DESTDIR} systemctl enable cups.service &>/dev/null
    chroot ${DESTDIR} systemctl enable dcron.service &>/dev/null
    chroot ${DESTDIR} systemctl enable NetworkManager.service &>/dev/null
    chroot ${DESTDIR} systemctl enable remote-fs.target &>/dev/null

    DIALOG --infobox "${_setupdisplaymanager}" 6 40
    sleep 3

    # setup lightdm
    if [ -e "/usr/sbin/lightdm" ] ; then
       mkdir -p ${DESTDIR}/run/lightdm  &>/dev/null
       chroot ${DESTDIR} getent group lightdm > /dev/null 2>&1 || groupadd -g 620 lightdm
       chroot ${DESTDIR} getent passwd lightdm > /dev/null 2>&1 || useradd -c 'LightDM Display Manager' -u 620 -g lightdm -d /var/run/lightdm -s /sbin/nologin lightdm
       chroot ${DESTDIR} passwd -l lightdm > /dev/null
       chown -R lightdm:lightdm ${DESTDIR}/run/lightdm  &>/dev/null
       sed -i -e 's/^.*user-session=.*/user-session=xfce/' ${DESTDIR}/etc/lightdm/lightdm.conf
       chmod +r ${DESTDIR}/etc/lightdm/lightdm.conf &>/dev/null
    fi

    # setup gdm
    if [ -e "/usr/sbin/gdm" ] ; then
       chroot ${DESTDIR} getent group gdm >/dev/null 2>&1 || groupadd -g 120 gdm
       chroot ${DESTDIR} getent passwd gdm > /dev/null 2>&1 || usr/sbin/useradd -c 'Gnome Display Manager' -u 120 -g gdm -d /var/lib/gdm -s /sbin/nologin gdm
       chroot ${DESTDIR} passwd -l gdm > /dev/null
       chroot ${DESTDIR} chown -R gdm:gdm /var/lib/gdm  &>/dev/null
       sed -i '/AutomaticLoginEnable=true/ d' ${DESTDIR}/etc/gdm/custom.conf
       sed -i '/AutomaticLogin=manjaro/ d' ${DESTDIR}/etc/gdm/custom.conf
    fi

    # setup lxdm
    if [ -e "/usr/sbin/lxdm" ] ; then
       if [ -z "`chroot ${DESTDIR} getent group "lxdm" 2> /dev/null`" ]; then
         chroot ${DESTDIR} groupadd lxdm  &>/dev/null
         chroot ${DESTDIR} chown root:lxdm /etc/lxdm/lxdm.conf  &>/dev/null
       fi
       if [ -e "/bootmnt/manjaro/${arch}/xfce-image.sqfs" ] ; then
         sed -i -e 's|^.*session=.*|session=/usr/bin/startxfce4|' ${DESTDIR}/etc/lxdm/lxdm.conf &>/dev/null
       fi
       chown root:lxdm ${DESTDIR}/etc/lxdm/lxdm.conf  &>/dev/null
       chown -R root:lxdm ${DESTDIR}/var/lib/lxdm  &>/dev/null
       chmod +r ${DESTDIR}/etc/lxdm/lxdm.conf &>/dev/null
    fi

    # setup kdm
    if [ -e "/usr/bin/kdm" ] ; then
       chroot ${DESTDIR} getent group kdm >/dev/null 2>&1 || groupadd -g 135 kdm &>/dev/null
       chroot ${DESTDIR} getent passwd kdm >/dev/null 2>&1 || useradd -u 135 -g kdm -d /var/lib/kdm -s /bin/false -r -M kdm &>/dev/null
       chroot ${DESTDIR} chown -R 135:135 var/lib/kdm &>/dev/null
       chroot ${DESTDIR} xdg-icon-resource forceupdate --theme hicolor &> /dev/null
       chroot ${DESTDIR} update-desktop-database -q
    fi

    # fix some apps

    DIALOG --infobox "${_fixapps}" 6 40
    sleep 3

    #fix_gnome_apps
    chroot ${DESTDIR} glib-compile-schemas /usr/share/glib-2.0/schemas
    chroot ${DESTDIR} gtk-update-icon-cache -q -t -f /usr/share/icons/hicolor
    chroot ${DESTDIR} dconf update

    if [ -e "/usr/bin/gnome-keyring-daemon" ] ; then
       chroot ${DESTDIR} setcap cap_ipc_lock=ep /usr/bin/gnome-keyring-daemon &>/dev/null
    fi

    #fix_ping_installation
    chroot ${DESTDIR} setcap cap_net_raw=ep /usr/bin/ping &>/dev/null
    chroot ${DESTDIR} setcap cap_net_raw=ep /usr/bin/ping6 &>/dev/null

    chroot_umount
}

set_passwd()
{
    # trap tmp-file for passwd
    trap "rm -f ${ANSWER}" 0 1 2 5 15
 
    # get password
    DIALOG --title "$_passwdtitle" \
    --clear \
    --insecure \
    --passwordbox "$_passwddl $PASSWDUSER" 10 30 2> ${ANSWER}
    PASSWD="$(cat ${ANSWER})"
    DIALOG --title "$_passwdtitle" \
    --clear \
    --insecure \
    --passwordbox "$_passwddl2 $PASSWDUSER" 10 30 2> ${ANSWER}
    PASSWD2="$(cat ${ANSWER})"
    if [ "$PASSWD" == "$PASSWD2" ]; then
       PASSWD=$PASSWD
       _passwddl=$_passwddl1
    else
       _passwddl=$_passwddl3
       set_passwd
    fi
}

# run_unsquashfs()
# runs unsquashfs on the target system, displays output
#
run_unsquashfs()
{
    # all unsquashfs output goes to /tmp/unsquashfs.log, which we tail
    # into a dialog
    ( \
        touch /tmp/setup-unsquashfs-running
        echo "unsquashing $SQF_FILE..." > /tmp/unsquashfs.log; \
        echo >> /tmp/unsquashfs.log; \
        unsquashfs -f -p 1 -d $UNSQUASH_TARGET /bootmnt/manjaro/${arch}/$SQF_FILE >> /tmp/unsquashfs.log 2>&1
        rm -f /tmp/setup-unsquashfs-running
    ) &

    (
    c="0"
    while [ $c -ne 100 ]
    do
        sleep 2
        value=`cat /tmp/unsquashfs.log | grep -Eo " [0-9]*%" | sed -e "s|[^0-9]||g" | tail -1`
        sleep 2
        c=$value
        echo $c
        echo "###"
        echo "$c %"
        echo "###"
    done
    ) | DIALOG --title "$_unsquash_dialog_title" --gauge "$_unsquash_dialog_info1 $SQF_FILE $_unsquash_dialog_info2" 10 60 0

    # save unsquashfs.log
    mv "/tmp/unsquashfs.log" "/tmp/unsquashfs-$SQF_FILE.log"
}

# run_mkinitcpio()
# runs mkinitcpio on the target system, displays output
#
run_mkinitcpio() {
    chroot_mount
    # fix fsck.btrfs issue
    chroot "$DESTDIR" ln -sf /bin/true /sbin/fsck.btrfs &> /dev/null

    # fix fsck.nilfs2 issue
    chroot "$DESTDIR" ln -sf /bin/true /sbin/fsck.nilfs2 &> /dev/null

    # all mkinitcpio output goes to /tmp/mkinitcpio.log, which we tail
    # into a dialog
    ( \
    touch /tmp/setup-mkinitcpio-running
    echo "${_runninginitcpio}" >> /tmp/mkinitcpio.log; \
    chroot "$DESTDIR" /usr/bin/mkinitcpio -p "$manjaro_kernel" >>/tmp/mkinitcpio.log 2>&1
    echo >> /tmp/mkinitcpio.log
    rm -f /tmp/setup-mkinitcpio-running
    ) &

    sleep 2

    DIALOG --title "${_runninginitcpiotitle}" --no-kill --tailboxbg "/tmp/mkinitcpio.log" 18 70
    while [ -f /tmp/setup-mkinitcpio-running ]; do
        /bin/true
    done

    chroot_umount
}

printk()
{
    case ${1} in
        "on")  echo 4 >/proc/sys/kernel/printk ;;
        "off") echo 0 >/proc/sys/kernel/printk ;;
    esac
}

# installsystem()
# installs to the target folder
installsystem() {
    DIALOG --msgbox "${_installationwillstart}" 0 0
    clear
    mkdir -p ${DESTDIR}
    #unsquashfs -f -d ${DESTDIR} /bootmnt/manjaro/${arch}/root-image.sqfs
    UNSQUASH_TARGET=${DESTDIR}
    SQF_FILE=root-image.sqfs
    run_unsquashfs
    echo $? > /tmp/.install-retcode
    if [ $(cat /tmp/.install-retcode) -ne 0 ]; then echo -e "\n${_installationfail}" >>/tmp/unsquasherror.log
    else echo -e "\n => Root-Image: ${_installationsuccess}" >>/tmp/unsquasherror.log
    fi
    sed -i '/dir_scan: failed to open directory [^ ]*, because File exists/d' /tmp/unsquasherror.log

    if [ -e "/bootmnt/manjaro/${arch}/xfce-image.sqfs" ] ; then
       #unsquashfs -f -d ${DESTDIR} /bootmnt/manjaro/${arch}/xfce-image.sqfs
       UNSQUASH_TARGET=${DESTDIR}
       SQF_FILE=xfce-image.sqfs
       run_unsquashfs
       echo $? > /tmp/.install-retcode
       if [ $(cat /tmp/.install-retcode) -ne 0 ]; then echo -e "\n${_installationfail}" >>/tmp/unsquasherror.log
       else echo -e "\n => XFCE-Image: ${_installationsuccess}" >>/tmp/unsquasherror.log
       fi
       sed -i '/dir_scan: failed to open directory [^ ]*, because File exists/d' /tmp/unsquasherror.log
    fi

    if [ -e "/bootmnt/manjaro/${arch}/kde-image.sqfs" ] ; then
       #unsquashfs -f -d ${DESTDIR} /bootmnt/manjaro/${arch}/kde-image.sqfs
       UNSQUASH_TARGET=${DESTDIR}
       SQF_FILE=kde-image.sqfs
       run_unsquashfs
       echo $? > /tmp/.install-retcode
       if [ $(cat /tmp/.install-retcode) -ne 0 ]; then echo -e "\n${_installationfail}" >>/tmp/unsquasherror.log
       else echo -e "\n => KDE-Image: ${_installationsuccess}" >>/tmp/unsquasherror.log
       fi
       sed -i '/dir_scan: failed to open directory [^ ]*, because File exists/d' /tmp/unsquasherror.log
    fi

    if [ -e "/bootmnt/manjaro/${arch}/gnome-image.sqfs" ] ; then
       #unsquashfs -f -d ${DESTDIR} /bootmnt/manjaro/${arch}/gnome-image.sqfs
       UNSQUASH_TARGET=${DESTDIR}
       SQF_FILE=gnome-image.sqfs
       run_unsquashfs
       echo $? > /tmp/.install-retcode
       if [ $(cat /tmp/.install-retcode) -ne 0 ]; then echo -e "\n${_installationfail}" >>/tmp/unsquasherror.log
       else echo -e "\n => Gnome-Image: ${_installationsuccess}" >>/tmp/unsquasherror.log
       fi
       sed -i '/dir_scan: failed to open directory [^ ]*, because File exists/d' /tmp/unsquasherror.log
    fi

    if [ -e "/bootmnt/manjaro/${arch}/openbox-image.sqfs" ] ; then
       #unsquashfs -f -d ${DESTDIR} /bootmnt/manjaro/${arch}/openbox-image.sqfs
       UNSQUASH_TARGET=${DESTDIR}
       SQF_FILE=openbox-image.sqfs
       run_unsquashfs
       echo $? > /tmp/.install-retcode
       if [ $(cat /tmp/.install-retcode) -ne 0 ]; then echo -e "\n${_installationfail}" >>/tmp/unsquasherror.log
       else echo -e "\n => Openbox-Image: ${_installationsuccess}" >>/tmp/unsquasherror.log
       fi
       sed -i '/dir_scan: failed to open directory [^ ]*, because File exists/d' /tmp/unsquasherror.log
    fi

    # finished, display scrollable output
    local _result=''
    if [ $(cat /tmp/.install-retcode) -ne 0 ]; then
      _result="${_installationfail}"
    else
      _result="${_installationsuccess}"
    fi
    rm /tmp/.install-retcode

    DIALOG --title "$_result" --exit-label "${_continue_label}" \
        --textbox "/tmp/unsquasherror.log" 18 60 || return 1

    # ensure the disk is synced
    sync

    S_INSTALL=1
    NEXTITEM=4

    # automagic time!
    # any automatic configuration should go here
    DIALOG --infobox "${_configuringsystem}" 6 40
    sleep 3

    hd_config
    auto_fstab
    _system_is_installed=1
}

set_language() {
    if [[ -e /etc/manjaro/lg ]]; then
        /etc/manjaro/lg --setup
    else
        DIALOG --msgbox "Error:\nlg script not found, aborting language setting" 0 0
    fi
}

set_keyboard() {
    if [[ -e /etc/manjaro/km ]]; then
        /etc/manjaro/km --setup
    else
        DIALOG --msgbox "Error:\nkm script not found, aborting keyboard and console setting" 0 0
    fi
}

# set_clock()
# prompts user to set hardware clock and timezone
#
# params: none
# returns: 1 on failure
set_clock()
{
    # utc or local?
    DIALOG --menu "${_machinetimezone}" 10 72 2 \
        "UTC" " " \
        "localtime" " " \
        2>${ANSWER} || return 1
    HARDWARECLOCK=$(cat ${ANSWER})

    # timezone?
    REGIONS=""
    for i in $(grep '^[A-Z]' /usr/share/zoneinfo/zone.tab | cut -f 3 | sed -e 's#/.*##g'| sort -u); do
      REGIONS="$REGIONS $i -"
    done
    region=""
    zone=""
    while [ -z "$zone" ];do
      region=""
      while [ -z "$region" ];do
        :>${ANSWER}
        DIALOG --menu "${_selectregion}" 0 0 0 $REGIONS 2>${ANSWER}
        region=$(cat ${ANSWER})
      done
      ZONES=""
      for i in $(grep '^[A-Z]' /usr/share/zoneinfo/zone.tab | grep $region/ | cut -f 3 | sed -e "s#$region/##g"| sort -u); do
        ZONES="$ZONES $i -"
      done
      :>${ANSWER}
      DIALOG --menu "${_selecttimezone}" 0 0 0 $ZONES 2>${ANSWER}
      zone=$(cat ${ANSWER})
    done
    TIMEZONE="$region/$zone"

    # set system clock from hwclock - stolen from rc.sysinit
    local HWCLOCK_PARAMS=""
    if [ "$HARDWARECLOCK" = "UTC" ]; then
        HWCLOCK_PARAMS="$HWCLOCK_PARAMS --utc"
    else
        HWCLOCK_PARAMS="$HWCLOCK_PARAMS --localtime"
        echo "0.0 0.0 0.0" > /etc/adjtime &> /dev/null
        echo "0" >> /etc/adjtime &> /dev/null
        echo "LOCAL" >> /etc/adjtime &> /dev/null
    fi
    if [ "$TIMEZONE" != "" -a -e "/usr/share/zoneinfo/$TIMEZONE" ]; then
        /bin/rm -f /etc/localtime
        /bin/cp "/usr/share/zoneinfo/$TIMEZONE" /etc/localtime
    fi
    /sbin/hwclock --hctosys $HWCLOCK_PARAMS --noadjfile

    # display and ask to set date/time
    DIALOG --calendar "${_choosedatetime}" 0 0 0 0 0 2> ${ANSWER} || return 1
    local _date="$(cat ${ANSWER})"
    DIALOG --timebox "${_choosehourtime}" 0 0 2> ${ANSWER} || return 1
    local _time="$(cat ${ANSWER})"
    echo "date: $_date time: $_time" >$LOG

    # save the time
    # DD/MM/YYYY hh:mm:ss -> YYYY-MM-DD hh:mm:ss
    local _datetime="$(echo "$_date" "$_time" | sed 's#\(..\)/\(..\)/\(....\) \(..\):\(..\):\(..\)#\3-\2-\1 \4:\5:\6#g')"
    echo "setting date to: $_datetime" >$LOG
    date -s "$_datetime" 2>&1 >$LOG
    /sbin/hwclock --systohc $HWCLOCK_PARAMS --noadjfile

    S_CLOCK=1
    NEXTITEM="2"
}

_setup_user()
{
    addgroups="video,audio,power,disk,storage,optical,network,lp,scanner"
    DIALOG --inputbox "${_enterusername}" 10 65 "manjaro" 2>${ANSWER} || return 1
    REPLY="$(cat ${ANSWER})"
    while [ -z "$(echo $REPLY |grep -E '^[a-z_][a-z0-9_-]*[$]?$')" ];do
       DIALOG --inputbox "${_givecorrectname}" 10 65 "manjaro" 2>${ANSWER} || return 1
       REPLY="$(cat ${ANSWER})"
    done

    chroot ${DESTDIR} useradd -m -p "" -g users -G $addgroups $REPLY

    PASSWDUSER="$REPLY"

    if [ -e "/bootmnt/manjaro/${arch}/gnome-image.sqfs" ] ; then
       cp /var/lib/AccountsService/users/manjaro ${DESTDIR}/var/lib/AccountsService/users/$PASSWDUSER
       cp -f /var/lib/AccountsService/users/manjaro ${DESTDIR}/var/lib/AccountsService/users/gdm
    fi

    if DIALOG --yesno "${_addsudouserdl1}${REPLY}${_addsudouserdl2}" 6 40;then
       echo "${PASSWDUSER}     ALL=(ALL) ALL" >> ${DESTDIR}/etc/sudoers
       chmod 0440 ${DESTDIR}/etc/sudoers
    fi
    set_passwd
    echo "$PASSWDUSER:$PASSWD" | chroot ${DESTDIR} chpasswd
    NEXTITEM="Setup-User"
    DONE_CONFIG=1
}

_config_system()
{
    DONE=0
    NEXTITEM=""
    while [[ "${DONE}" = "0" ]]; do
        if [[ -n "${NEXTITEM}" ]]; then
            DEFAULT="--default-item ${NEXTITEM}"
        else
            DEFAULT=""
        fi
        DIALOG $DEFAULT --menu "Configuration" 17 78 10 \
            "/etc/fstab"                "${_fstabtext}" \
            "/etc/mkinitcpio.conf"      "${_mkinitcpioconftext}" \
            "/etc/resolv.conf"          "${_resolvconftext}" \
            "/etc/hostname"             "${_hostnametext}" \
            "/etc/hosts"                "${_hoststext}" \
            "/etc/hosts.deny"           "${_hostsdenytext}" \
            "/etc/hosts.allow"          "${_hostsallowtext}" \
            "/etc/locale.gen"           "${_localegentext}" \
            "/etc/locale.conf"           "${_localeconftext}" \
            "/etc/environment"           "${_environmenttext}" \
            "/etc/pacman.d/mirrorlist"  "${_mirrorlisttext}" \
            "/etc/X11/xorg.conf.d/10-evdev.conf"  "${_xorgevdevconftext}" \
            "/etc/vconsole.conf"        "${_vconsoletext}" \
            "${_return_label}"        "${_return_label}" 2>${ANSWER} || NEXTITEM="${_return_label}"
        NEXTITEM="$(cat ${ANSWER})"

        if [ "${NEXTITEM}" = "${_return_label}" -o -z "${NEXTITEM}" ]; then       # exit
           DONE=1
        else
           $EDITOR ${DESTDIR}${NEXTITEM}
        fi
    done
}

_rm_kalu() {
    local base_check_virtualbox=`dmidecode | grep innotek`
    local base_check_vmware=`dmidecode | grep VMware`
    local base_check_qemu=`dmidecode | grep QEMU`
    local base_check_vpc=`dmidecode | grep Microsoft`

    if [ -n "$base_check_virtualbox" ]; then
       pacman -R kalu --noconfirm --noprogressbar --root ${DESTDIR} &> /dev/null
    elif [ -n "$base_check_vmware" ]; then
       pacman -R kalu --noconfirm --noprogressbar --root ${DESTDIR} &> /dev/null
    elif [ -n "$base_check_qemu" ]; then
       pacman -R kalu --noconfirm --noprogressbar --root ${DESTDIR} &> /dev/null
    elif [ -n "$base_check_vpc" ]; then
       pacman -R kalu --noconfirm --noprogressbar --root ${DESTDIR} &> /dev/null
    fi
}

_post_process()
{
    ## POSTPROCESSING ##
    # /etc/locale.gen
    #
    DIALOG --infobox "${_localegen}" 0 0
    chroot ${DESTDIR} locale-gen &> /dev/null

    # installing localization packages
    if [ -e "/bootmnt/manjaro/${arch}/lng-image.sqfs" ] ; then
       _configure_translation_pkgs
       if [ ! -e "/bootmnt/manjaro/${arch}/kde-image.sqfs" ] ; then
          PACMAN_LNG_INST_KDE=""
       fi
       ${PACMAN_LNG} -Sy ${PACMAN_LNG_INST} ${PACMAN_LNG_INST_KDE} &> /dev/null
    fi

    # check if we are running inside a virtual machine and unistall kalu
    if [ -e "${DESTDIR}/usr/bin/kalu" ] ; then
       _rm_kalu
    fi


    # add BROWSER var
    if [ -e "${DESTDIR}/usr/bin/firefox" ] ; then
       echo "BROWSER=/usr/bin/firefox" >> ${DESTDIR}/etc/environment
    fi

    # /etc/localtime
    cp /etc/localtime ${DESTDIR}/etc/localtime &> /dev/null
    if [ -e "/etc/adjtime" ] ; then
       cp /etc/adjtime ${DESTDIR}/etc/adjtime &> /dev/null
    fi

    # sync pacman databases
    DIALOG --infobox "${_syncpacmandb}" 0 0
    sleep 3
    chroot ${DESTDIR} pacman -Syy &> /dev/null

    # create kernel images
    sleep 3  
    run_mkinitcpio
    sleep 3

    ## END POSTPROCESSING ##
    # TODO add end cleaning

    S_CONFIG=1
    NEXTITEM=5
    _system_is_configured=1
}

# Disable swap and all mounted partitions for the destination system. Unmount
# the destination root partition last!
_umountall()
{
    DIALOG --infobox "$_umountingall" 0 0
    swapoff -a >/dev/null 2>&1
    umount $(mount | grep -v "${DESTDIR} " | grep "${DESTDIR}" | sed 's|\ .*||g') >/dev/null 2>&1
    umount $(mount | grep "${DESTDIR} " | sed 's|\ .*||g') >/dev/null 2>&1
}

# Umount all mounted partitions
_umounthdds()
{
    for UPART in $(findpartitions); do
        umount $(mount | grep ${UPART} | grep -v /bootmnt | sed 's|\ .*||g') >/dev/null 2>&1
    done
}

dogrub_mkconfig() {
    chroot_mount

    # prepare grub.cfg
    chroot ${DESTDIR} mkdir -p /boot/grub/locale
    chroot ${DESTDIR} cp /usr/share/locale/en@quot/LC_MESSAGES/grub.mo /boot/grub/locale/en.mo

    # remove splash if no plymouth was found
    if [ ! -e ${DESTDIR}/etc/plymouth/plymouthd.conf ] ; then
       sed -i -e "s,GRUB_CMDLINE_LINUX_DEFAULT=.*,GRUB_CMDLINE_LINUX_DEFAULT=\"`cat $DESTDIR/etc/default/grub | grep GRUB_CMDLINE_LINUX_DEFAULT | sed s'/splash //'g`\",g" $DESTDIR/etc/default/grub
    fi

    # generate resume string for suspend to disk
    swap_partition=$(swapon -s | grep dev -m1 | cut -d" " -f1)
    if [ "$swap_partition" != "" ]; then
       sed -i -e "s,GRUB_CMDLINE_LINUX_DEFAULT=.*,GRUB_CMDLINE_LINUX_DEFAULT=\"`cat $DESTDIR/etc/default/grub | grep GRUB_CMDLINE_LINUX_DEFAULT | cut -d'"' -f2` resume=/dev/disk/by-uuid/`blkid -s UUID -o value -p ${swap_partition}`\",g" $DESTDIR/etc/default/grub
    fi

    # create grub.cfg
    chroot ${DESTDIR} grub-mkconfig -o "/${GRUB_PREFIX_DIR}/grub.cfg" >> /tmp/grub.log 2>&1

    chroot_umount
}
