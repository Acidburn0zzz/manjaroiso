#!/bin/bash

# switch to basic language
export LANG=C
export LC_MESSAGES=C

if [ ! -e options.conf ] ; then
    echo " "
    echo "the config file options.conf is missing, exiting..."
    echo " "
    exit
fi

if [ ! -e /usr/share/manjaroiso/functions/messages ] ; then
    echo " "
    echo "missing manjaroiso functions file, please run «sudo make install» inside manjaroiso/"
    echo " "
    exit
fi

.  /usr/share/manjaroiso/functions/messages
. options.conf
get_colors

de=""


# do UID checking here so someone can at least get usage instructions
if [ "$EUID" != "0" ]; then
    echo "error: This script must be run as root."
    exit 1
fi

banner

if [ -z "${arch}" ] ; then
    arch=$(pacman -Qi bash | grep "Architecture" | cut -d " " -f 5)
    echo " "
    msg  "architecture not supplied, defaulting to host's architecture: ${arch}"
fi


if [ ! -e Packages ] ; then
    echo " "
    error "the config file Packages is missing, exiting..."
    echo " "
    exit
fi

if [ ! -e "pacman-${arch}.conf" ] ; then
    echo " "
    error "the config file pacman-${arch}.conf is missing, exiting..."
    echo " "
    exit
fi

set -e -u

pwd=`pwd`

if [ "${arch}" == "i686" ]; then
	packages=$(sed "s|#.*||g" Packages | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
elif [ "${arch}" == "x86_64" ]; then
	packages=$(sed "s|#.*||g" Packages | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
fi

if [ -e Packages-Xorg ] ; then
     if [ "${arch}" == "i686" ]; then
     	xorg_packages=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni||g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_free_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_nonfree_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni.*||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni||g" | sed "s|^.*catalyst-legacy.*||g" | sed ':a;N;$!ba;s/\n/ /g')

     elif [ "${arch}" == "x86_64" ]; then
     	xorg_packages=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64||g" | sed "s|>free_uni||g" | sed "s|>nonfree_uni||g" | sed "s|>nonfree_x64||g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_free_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64||g" | sed "s|>free_uni||g" | sed "s|>nonfree_uni.*||g" | sed "s|>nonfree_x64.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_nonfree_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni.*||g" | sed "s|>nonfree_uni||g" | sed "s|>nonfree_x64||g" | sed "s|^.*catalyst-legacy.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
     xorg_packages_cleanup=$(sed "s|#.*||g" Packages-Xorg | grep cleanup | sed "s|>cleanup||g")
fi

if [ -e Packages-Lng ] ; then
     if [ "${arch}" == "i686" ]; then
     	lng_packages=$(sed "s|#.*||g" Packages-Lng | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>kde.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	lng_packages=$(sed "s|#.*||g" Packages-Lng | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>kde.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
     lng_packages_cleanup=$(sed "s|#.*||g" Packages-Lng | grep cleanup | sed "s|>cleanup||g")
     lng_packages_kde=$(sed "s|#.*||g" Packages-Lng | grep kde | sed "s|>kde||g" | sed ':a;N;$!ba;s/\n/ /g')
fi

if [ -e Packages-Xfce ] ; then
     if [ "${arch}" == "i686" ]; then
     	xfce_packages=$(sed "s|#.*||g" Packages-Xfce | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	xfce_packages=$(sed "s|#.*||g" Packages-Xfce | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

if [ -e Packages-Kde ] ; then
     if [ "${arch}" == "i686" ]; then
     	kde_packages=$(sed "s|#.*||g" Packages-Kde | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	kde_packages=$(sed "s|#.*||g" Packages-Kde | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

if [ -e Packages-gnome ] ; then
     if [ "${arch}" == "i686" ]; then
     	gnome_packages=$(sed "s|#.*||g" Packages-gnome | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	gnome_packages=$(sed "s|#.*||g" Packages-gnome | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

if [ -e Packages-Openbox ] ; then
     if [ "${arch}" == "i686" ]; then
     	openbox_packages=$(sed "s|#.*||g" Packages-Openbox | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	openbox_packages=$(sed "s|#.*||g" Packages-Openbox | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

if [ -e Packages-Lxde ] ; then
     if [ "${arch}" == "i686" ]; then
     	lxde_packages=$(sed "s|#.*||g" Packages-Lxde | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	lxde_packages=$(sed "s|#.*||g" Packages-Lxde | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

# Create trustdb.gpg
create_trustdb() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
         echo -e -n "$_r >$_W Creating trustdb.gpg for pacman-key \n   --> This might take a while ...\n $_n"
         mkdir -p "${work_dir}/root-image/etc/pacman.d/gnupg"
         # Generate initial keychain, use haveged then no user interaction is required
         if  [[ -f /var/run/haveged.pid ]]; then
             kill $(cat /var/run/haveged.pid)
         fi
         haveged
         pacman-key --init --gpgdir "${work_dir}/root-image/etc/pacman.d/gnupg"
         echo -e "$_g >$_W done $_n"
         echo -e -n "$_r >$_W Importing trusted keys \n $_n"
         ### HACK: fix accept of master keys!
         sed -i -e 's#"${GPG_PACMAN\[\@\]}" --quiet --lsign-key "${key_id}"#"${GPG_PACMAN\[\@\]}" --batch --yes --quiet --lsign-key "${key_id}"#g' \
         /usr/bin/pacman-key
         pacman-key --populate archlinux manjaro --gpgdir "${work_dir}/root-image/etc/pacman.d/gnupg"
         ### HACK: fix accept of master keys!
         sed -i -e 's#"${GPG_PACMAN\[\@\]}" --batch --yes --quiet --lsign-key "${key_id}"#"${GPG_PACMAN\[\@\]}" --quiet --lsign-key "${key_id}"#g' \
         /usr/bin/pacman-key
         kill $(cat /var/run/haveged.pid)
         : > ${work_dir}/build.${FUNCNAME}
         echo -e "$_g >$_W done $_n"
    fi
}

# Base installation (root-image)
make_root_image() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
         echo -e -n "$_r >$_W Base installation (root-image) \n $_n"
         mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "root-image" -p "${packages}" create "${work_dir}"
         pacman -Qr "${work_dir}/root-image" > "${work_dir}/root-image/root-image-pkgs.txt"
         cp ${work_dir}/root-image/etc/locale.gen.bak ${work_dir}/root-image/etc/locale.gen
         if [ -e ${work_dir}/root-image/boot/grub/grub.cfg ] ; then
            rm ${work_dir}/root-image/boot/grub/grub.cfg
         fi
         if [ -e ${work_dir}/root-image/etc/plymouth/plymouthd.conf ] ; then
            sed -i -e "s/^.*Theme=.*/Theme=$plymouth_theme/" ${work_dir}/root-image/etc/plymouth/plymouthd.conf
         fi
         if [ -e ${work_dir}/root-image/usr/sbin/cupsd ] ; then
            mkdir -p "${work_dir}/root-image/etc/systemd/system/multi-user.target.wants"
            ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/root-image/etc/systemd/system/multi-user.target.wants/cups.service"
         fi
         cp -LPr overlay/* ${work_dir}/root-image
         cp pacman-${arch}.conf ${work_dir}/root-image/etc/pacman.conf
         : > ${work_dir}/build.${FUNCNAME}
         echo -e "$_g >$_W done $_n"
    fi
}

if [ -e Packages-Xorg ] ; then
     # Prepare pkgs-image
     make_pkgs_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              echo -e -n "$_r >$_W Prepare pkgs-image \n $_n"
              mkdir -p ${work_dir}/pkgs-image/opt/manjaro/pkgs
              if [ "`mount -l | grep pkgs-image`" != "" ]; then
                 umount -l ${work_dir}/pkgs-image
              fi
              mount -t aufs -o br=${work_dir}/pkgs-image:${work_dir}/root-image=ro none ${work_dir}/pkgs-image
              pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/pkgs-image" --cache ${work_dir}/pkgs-image/opt/manjaro/pkgs -Syw ${xorg_packages} --noconfirm
              if [ "${xorg_packages_cleanup}" != "" ]; then
                 for xorg_clean in ${xorg_packages_cleanup};
                    do  rm ${work_dir}/pkgs-image/opt/manjaro/pkgs/${xorg_clean}
                    done
              fi
              cp pacman-gfx.conf ${work_dir}/pkgs-image/opt/manjaro
              rm -r ${work_dir}/pkgs-image/var
              repo-add ${work_dir}/pkgs-image/opt/manjaro/pkgs/manjaro-pkgs.db.tar.gz ${work_dir}/pkgs-image/opt/manjaro/pkgs/*pkg*z
              umount -l ${work_dir}/pkgs-image
              rm -R ${work_dir}/pkgs-image/.wh*
              if [ "${xorg_overlays}" = "yes" ] ; then
                 echo -e -n "$_r >$_W Prepare pkgs-free-overlay \n $_n"
                 mkdir -p ${work_dir}/pkgs-free-overlay
                 if [ "`mount -l | grep pkgs-free-overlay`" != "" ]; then
                    umount -l ${work_dir}/pkgs-free-overlay
                 fi
                 mount -t aufs -o br=${work_dir}/pkgs-free-overlay:${work_dir}/root-image=ro none ${work_dir}/pkgs-free-overlay
                 mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "pkgs-free-overlay" -p "${xorg_free_overlay}" create "${work_dir}"
                 umount -l ${work_dir}/pkgs-free-overlay
                 if [ -e ${work_dir}/pkgs-free-overlay/etc/modules-load.d/*virtualbox*conf ] ; then
                    rm ${work_dir}/pkgs-free-overlay/etc/modules-load.d/*virtualbox*conf
                 fi
                 rm -R ${work_dir}/pkgs-free-overlay/.wh*
                 echo -e -n "$_r >$_W Prepare pkgs-nonfree-overlay \n $_n"
                 mkdir -p ${work_dir}/pkgs-nonfree-overlay
                 if [ "`mount -l | grep pkgs-nonfree-overlay`" != "" ]; then
                    umount -l ${work_dir}/pkgs-nonfree-overlay
                 fi
                 mount -t aufs -o br=${work_dir}/pkgs-nonfree-overlay:${work_dir}/root-image=ro none ${work_dir}/pkgs-nonfree-overlay
                 mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "pkgs-nonfree-overlay" -p "${xorg_nonfree_overlay}" create "${work_dir}"
                 umount -l ${work_dir}/pkgs-nonfree-overlay
                 if [ -e ${work_dir}/pkgs-nonfree-overlay/etc/modules-load.d/*virtualbox*conf ] ; then
                    rm ${work_dir}/pkgs-nonfree-overlay/etc/modules-load.d/*virtualbox*conf
                 fi
                 rm -R ${work_dir}/pkgs-nonfree-overlay/.wh*
              fi
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Lng ] ; then
     # Prepare lng-image
     make_lng_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              echo -e -n "$_r >$_W Prepare lng-image \n $_n"
              mkdir -p ${work_dir}/lng-image/opt/manjaro/lng
              if [ "`mount -l | grep lng-image`" != "" ]; then
                 umount -l ${work_dir}/lng-image
              fi
              mount -t aufs -o br=${work_dir}/lng-image:${work_dir}/root-image=ro none ${work_dir}/lng-image
              if [ "${kde_lng_packages}" = "yes" ] ; then
                 pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/lng-image" --cache ${work_dir}/lng-image/opt/manjaro/lng -Syw ${lng_packages} ${lng_packages_kde} --noconfirm
              else
                 pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/lng-image" --cache ${work_dir}/lng-image/opt/manjaro/lng -Syw ${lng_packages} --noconfirm
              fi
              if [ "${lng_packages_cleanup}" != "" ]; then
                 for lng_clean in ${lng_packages_cleanup};
                    do  rm ${work_dir}/lng-image/opt/manjaro/lng/${lng_clean}
                    done
              fi
              cp pacman-lng.conf ${work_dir}/lng-image/opt/manjaro
              rm -r ${work_dir}/lng-image/var
              repo-add ${work_dir}/lng-image/opt/manjaro/lng/manjaro-lng.db.tar.gz ${work_dir}/lng-image/opt/manjaro/lng/*pkg*z
              umount -l ${work_dir}/lng-image
              rm -R ${work_dir}/lng-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Xfce ] ; then
     # XFCE installation (xfce-image)
     make_xfce_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              de="-xfce"
              echo -e -n "$_r >$_W XFCE installation (xfce-image) \n $_n"
              mkdir -p ${work_dir}/xfce-image
              if [ "`mount -l | grep xfce-image`" != "" ]; then
                 umount -l ${work_dir}/xfce-image
              fi
              mount -t aufs -o br=${work_dir}/xfce-image:${work_dir}/root-image=ro none ${work_dir}/xfce-image
              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "xfce-image" -p "${xfce_packages}" create "${work_dir}"
              pacman -Qr "${work_dir}/xfce-image" > "${work_dir}/xfce-image/xfce-image-pkgs.txt"
              cp "${work_dir}/xfce-image/xfce-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              cp -LPr xfce-overlay/* ${work_dir}/xfce-image
              if [ -e ${work_dir}/xfce-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/xfce-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/xfce-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              umount -l ${work_dir}/xfce-image
              rm -R ${work_dir}/xfce-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Kde ] ; then
     # KDE installation (kde-image)
     make_kde_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              de="-kde"
              echo -e -n "$_r >$_W KDE installation (kde-image) \n $_n"
              mkdir -p ${work_dir}/kde-image
              if [ "`mount -l | grep kde-image`" != "" ]; then
                 umount -l ${work_dir}/kde-image
              fi
              mount -t aufs -o br=${work_dir}/kde-image:${work_dir}/root-image=ro none ${work_dir}/kde-image
              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "kde-image" -p "${kde_packages}" create "${work_dir}"
              pacman -Qr "${work_dir}/kde-image" > "${work_dir}/kde-image/kde-image-pkgs.txt"
              cp "${work_dir}/kde-image/kde-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              cp -LPr kde-overlay/* ${work_dir}/kde-image
              if [ -e ${work_dir}/kde-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/kde-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/kde-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              umount -l ${work_dir}/kde-image
              rm -R ${work_dir}/kde-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-gnome ] ; then
     # GNOME installation (gnome-image)
     make_gnome_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              de="-gnome"
              echo -e -n "$_r >$_W GNOME installation (gnome-image) \n $_n"
              mkdir -p ${work_dir}/gnome-image
              if [ "`mount -l | grep gnome-image`" != "" ]; then
                 umount -l ${work_dir}/gnome-image
              fi
              mount -t aufs -o br=${work_dir}/gnome-image:${work_dir}/root-image=ro none ${work_dir}/gnome-image
              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "gnome-image" -p "${gnome_packages}" create "${work_dir}"
              pacman -Qr "${work_dir}/gnome-image" > "${work_dir}/gnome-image/gnome-image-pkgs.txt"
              cp "${work_dir}/gnome-image/gnome-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              cp -LPr gnome-overlay/* ${work_dir}/gnome-image
              if [ -e ${work_dir}/gnome-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/gnome-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/gnome-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              umount -l ${work_dir}/gnome-image
              rm -R ${work_dir}/gnome-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Openbox ] ; then
     # Openbox installation (openbox-image)
     make_openbox_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              de="-openbox"
              echo -e -n "$_r >$_W Openbox installation (openbox-image) \n $_n"
              mkdir -p ${work_dir}/openbox-image
              if [ "`mount -l | grep openbox-image`" != "" ]; then
                 umount -l ${work_dir}/openbox-image
              fi
              mount -t aufs -o br=${work_dir}/openbox-image:${work_dir}/root-image=ro none ${work_dir}/openbox-image
              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "openbox-image" -p "${openbox_packages}" create "${work_dir}"
              pacman -Qr "${work_dir}/openbox-image" > "${work_dir}/openbox-image/openbox-image-pkgs.txt"
              cp "${work_dir}/openbox-image/openbox-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              cp -LPr openbox-overlay/* ${work_dir}/openbox-image
              if [ -e ${work_dir}/openbox-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/openbox-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/openbox-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              umount -l ${work_dir}/openbox-image
              rm -R ${work_dir}/openbox-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Lxde ] ; then
     # LXDE installation (lxde-image)
     make_lxde_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              de="-lxde"
              echo -e -n "$_r >$_W LXDE installation (lxde-image) \n $_n"
              mkdir -p ${work_dir}/lxde-image
              if [ "`mount -l | grep lxde-image`" != "" ]; then
                 umount -l ${work_dir}/lxde-image
              fi
              mount -t aufs -o br=${work_dir}/lxde-image:${work_dir}/root-image=ro none ${work_dir}/lxde-image
              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "lxde-image" -p "${lxde_packages}" create "${work_dir}"
              pacman -Qr "${work_dir}/lxde-image" > "${work_dir}/lxde-image/lxde-image-pkgs.txt"
              cp "${work_dir}/lxde-image/lxde-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              cp -LPr lxde-overlay/* ${work_dir}/lxde-image
              if [ -e ${work_dir}/lxde-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/lxde-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/lxde-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              umount -l ${work_dir}/lxde-image
              rm -R ${work_dir}/lxde-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

# Prepare ${install_dir}/boot/
make_boot() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
	echo -e -n "$_r >$_W Prepare ${install_dir}/boot/ \n $_n"
	mkdir -p ${work_dir}/iso/${install_dir}/boot/${arch}
        cp ${work_dir}/root-image/boot/memtest86+/memtest.bin ${work_dir}/iso/${install_dir}/boot/${arch}/memtest
	cp ${work_dir}/root-image/boot/vmlinuz* ${work_dir}/iso/${install_dir}/boot/${arch}/manjaroiso
        mkdir -p ${work_dir}/boot-image
        if [ "`mount -l | grep boot-image`" != "" ]; then
           umount -l ${work_dir}/boot-image/proc ${work_dir}/boot-image/sys ${work_dir}/boot-image/dev ${work_dir}/boot-image
        fi
        mount -t aufs -o br=${work_dir}/boot-image:${work_dir}/root-image=ro none ${work_dir}/boot-image
        mount -t proc none ${work_dir}/boot-image/proc
        mount -t sysfs none ${work_dir}/boot-image/sys
        mount -o bind /dev ${work_dir}/boot-image/dev
        cp /usr/lib/initcpio/hooks/miso* ${work_dir}/boot-image/usr/lib/initcpio/hooks
        cp /usr/lib/initcpio/install/miso* ${work_dir}/boot-image/usr/lib/initcpio/install
        cp mkinitcpio.conf ${work_dir}/boot-image/etc/mkinitcpio-manjaroiso.conf
        _kernver=`cat ${work_dir}/boot-image/usr/lib/modules/*-MANJARO/version`
        chroot ${work_dir}/boot-image /usr/bin/mkinitcpio -k ${_kernver} -c /etc/mkinitcpio-manjaroiso.conf -g /boot/manjaro.img
        mv ${work_dir}/boot-image/boot/manjaro.img ${work_dir}/iso/${install_dir}/boot/${arch}/manjaro.img
        umount -l ${work_dir}/boot-image/proc ${work_dir}/boot-image/sys ${work_dir}/boot-image/dev ${work_dir}/boot-image
        rm -R ${work_dir}/boot-image
	: > ${work_dir}/build.${FUNCNAME}
	echo -e "$_g >$_W done $_n"
    fi
}

# Prepare ${install_dir}/boot/EFI
make_efi() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        if [[ ${arch} == "x86_64" ]]; then
            echo -e -n "$_r >$_W Prepare ${install_dir}/boot/EFI \n $_n"
            mkdir -p ${work_dir}/iso/EFI/boot
            cp ${work_dir}/root-image/usr/lib/refind/refindx64.efi ${work_dir}/iso/EFI/boot/bootx64.efi

            cp -rf ${work_dir}/root-image/usr/share/refind/icons ${work_dir}/iso/EFI/boot
	
            mkdir -p ${work_dir}/iso/EFI/tools
            cp -rf ${work_dir}/root-image/usr/lib/refind/drivers_x64 ${work_dir}/iso/EFI/tools

cat << EOF > "${work_dir}/iso/EFI/boot/refind.conf"
timeout 5

hideui singleuser

textonly
#resolution 1024 768

use_graphics_for osx

showtools about,reboot,shutdown,exit

scan_driver_dirs EFI/tools/drivers_x64

scanfor manual,internal,external,optical

scan_delay 1

#also_scan_dirs boot

dont_scan_dirs EFI/boot

#scan_all_linux_kernels

max_tags 0

default_selection "Manjaro Linux x86_64 UEFI USB (default)"

menuentry "Manjaro Linux x86_64 UEFI USB (default)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /${install_dir}/boot/x86_64/manjaroiso
	initrd /${install_dir}/boot/x86_64/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=free"
}

menuentry "Manjaro Linux x86_64 UEFI USB (nonfree)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /${install_dir}/boot/x86_64/manjaroiso
	initrd /${install_dir}/boot/x86_64/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=nonfree nonfree=yes"
}

menuentry "Manjaro Linux x86_64 UEFI USB (textmode)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /${install_dir}/boot/x86_64/manjaroiso
	initrd /${install_dir}/boot/x86_64/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=free 3"
}

menuentry "UEFI x64 Shell v2" {
	icon /EFI/boot/icons/tool_shell.icns
	loader /EFI/tools/shellx64_v2.efi
	graphics off
}

menuentry "UEFI x64 Shell v1" {
	icon /EFI/boot/icons/tool_shell.icns
	loader /EFI/tools/shellx64_v1.efi
	graphics off
}
EOF

            if [[ -e ${work_dir}/iso/EFI/tools/shellx64_v2.efi ]]; then
               rm ${work_dir}/iso/EFI/tools/shellx64_v2.efi
            fi

            if [[ -e ${work_dir}/iso/EFI/tools/shellx64_v1.efi ]]; then
               rm ${work_dir}/iso/EFI/tools/shellx64_v1.efi
            fi

            ## Download Tianocore UDK/EDK2 ShellBinPkg UEFI "Full Shell" - For UEFI Spec. >=2.3 systems
            curl --verbose -f -C - --ftp-pasv --retry 3 --retry-delay 3 -o ${work_dir}/iso/EFI/tools/shellx64_v2.efi https://edk2.svn.sourceforge.net/svnroot/edk2/trunk/edk2/ShellBinPkg/UefiShell/X64/Shell.efi
	
            ## Download Tianocore UDK/EDK2 EdkShellBinPkg UEFI "Full Shell" - For UEFI Spec. <2.3 systems
            curl --verbose -f -C - --ftp-pasv --retry 3 --retry-delay 3 -o ${work_dir}/iso/EFI/tools/shellx64_v1.efi https://edk2.svn.sourceforge.net/svnroot/edk2/trunk/edk2/EdkShellBinPkg/FullShell/X64/Shell_Full.efi
	

        fi
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare ${install_dir}/iso/EFI
make_efiboot() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        if [[ ${arch} == "x86_64" ]]; then
            echo -e -n "$_r >$_W Prepare ${install_dir}/iso/EFI \n $_n"
            mkdir -p ${work_dir}/iso/EFI/miso
            truncate -s 31M ${work_dir}/iso/EFI/miso/manjaro.img
            mkfs.vfat -n MISO_EFI ${work_dir}/iso/EFI/miso/manjaro.img

            mkdir -p ${work_dir}/efiboot
            mount ${work_dir}/iso/EFI/miso/manjaro.img ${work_dir}/efiboot

            mkdir -p ${work_dir}/efiboot/EFI/miso
            cp ${work_dir}/iso/${install_dir}/boot/x86_64/manjaroiso ${work_dir}/efiboot/EFI/miso/manjaroiso.efi
            cp ${work_dir}/iso/${install_dir}/boot/x86_64/manjaro.img ${work_dir}/efiboot/EFI/miso/manjaro.img

            mkdir -p ${work_dir}/efiboot/EFI/boot
            cp ${work_dir}/root-image/usr/lib/refind/refindx64.efi ${work_dir}/efiboot/EFI/boot/bootx64.efi

            cp -rf ${work_dir}/root-image/usr/share/refind/icons ${work_dir}/efiboot/EFI/boot
	
            mkdir -p ${work_dir}/efiboot/EFI/tools
            cp -rf ${work_dir}/root-image/usr/lib/refind/drivers_x64 ${work_dir}/efiboot/EFI/tools

cat << EOF > "${work_dir}/efiboot/EFI/boot/refind.conf"
timeout 5

hideui singleuser

textonly
#resolution 1024 768

use_graphics_for osx

showtools about,reboot,shutdown,exit

scan_driver_dirs EFI/tools/drivers_x64

scanfor manual,internal,external,optical

scan_delay 1

#also_scan_dirs boot

dont_scan_dirs EFI/boot

#scan_all_linux_kernels

max_tags 0

default_selection "Manjaro Linux x86_64 UEFI CD (default)"

menuentry "Manjaro Linux x86_64 UEFI CD (default)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /EFI/miso/manjaroiso.efi
	initrd /EFI/miso/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=free"
}

menuentry "Manjaro Linux x86_64 UEFI CD (nonfree)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /EFI/miso/manjaroiso.efi
	initrd /EFI/miso/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=nonfree nonfree=yes"
}

menuentry "Manjaro Linux x86_64 UEFI CD (textmode)" {
	icon /EFI/boot/icons/os_linux.icns
	loader /EFI/miso/manjaroiso.efi
	initrd /EFI/miso/manjaro.img
	ostype Linux
	graphics off
	options "gpt loglevel=7 pci=nocrs add_efi_memmap none=UEFI_ARCH_x64 misobasedir=${install_dir} misolabel=${iso_label} nouveau.modeset=1 i915.modeset=1 radeon.modeset=1 logo.nologo overlay=free 3"
}

menuentry "UEFI x64 Shell v2" {
	icon /EFI/boot/icons/tool_shell.icns
	loader /EFI/tools/shellx64_v2.efi
	graphics off
}

menuentry "UEFI x64 Shell v1" {
	icon /EFI/boot/icons/tool_shell.icns
	loader /EFI/tools/shellx64_v1.efi
	graphics off
}
EOF

            cp -R ${work_dir}/iso/EFI/tools ${work_dir}/efiboot/EFI

            # DEBUG
            #cp -rf ${work_dir}/efiboot ${work_dir}/../efiboot-folder

            umount ${work_dir}/efiboot

        fi
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare /${install_dir}/boot/syslinux
make_syslinux() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare ${install_dir}/boot/${arch}/syslinux \n $_n"
        local _src_syslinux=${work_dir}/root-image/usr/lib/syslinux
        local _dst_syslinux=${work_dir}/iso/${install_dir}/boot/${arch}/syslinux
        mkdir -p ${_dst_syslinux}
        for confile in `ls syslinux/*.cfg`;
           do  sed "s|%MISO_LABEL%|${iso_label}|g;
                s|%INSTALL_DIR%|${install_dir}|g;
                s|%ARCH%|${arch}|g" ${confile} > ${work_dir}/iso/${install_dir}/boot/${arch}/${confile};
           done
        cp syslinux/splash.png ${_dst_syslinux}
        cp syslinux/*.c32 ${_dst_syslinux}
        cp syslinux/*.txt ${_dst_syslinux}
        cp ${_src_syslinux}/*.c32 ${_dst_syslinux}
        cp ${_src_syslinux}/*.com ${_dst_syslinux}
        cp ${_src_syslinux}/*.0 ${_dst_syslinux}
        cp ${_src_syslinux}/memdisk ${_dst_syslinux}
        mkdir -p ${_dst_syslinux}/hdt
        cat ${work_dir}/root-image/usr/share/hwdata/pci.ids | gzip -9 > ${_dst_syslinux}/hdt/pciids.gz
        cat ${work_dir}/root-image/usr/lib/modules/*-MANJARO/modules.alias | gzip -9 > ${_dst_syslinux}/hdt/modalias.gz

        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare /isolinux
make_isolinux() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare ${install_dir}/iso/isolinux \n $_n"
        mkdir -p ${work_dir}/iso/isolinux
        sed "s|%INSTALL_DIR%|${install_dir}|g;
             s|%ARCH%|${arch}|g" isolinux/isolinux.cfg > ${work_dir}/iso/isolinux/isolinux.cfg
        cp ${work_dir}/root-image/usr/lib/syslinux/isolinux.bin ${work_dir}/iso/isolinux/
        cp ${work_dir}/root-image/usr/lib/syslinux/isohdpfx.bin ${work_dir}/iso/isolinux/
        : > ${work_dir}/build.${FUNCNAME}
    fi
}

# Prepare overlay-image
make_overlay() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare overlay-image \n $_n"
        mkdir -p ${work_dir}/overlay/etc/pacman.d
        cp -LPrd overlay-livecd/* ${work_dir}/overlay
        wget -O ${work_dir}/overlay/etc/pacman.d/mirrorlist http://git.manjaro.org/packages-sources/basis/blobs/raw/master/pacman-mirrorlist/mirrorlist
        sed -i "s/#Server/Server/g" ${work_dir}/overlay/etc/pacman.d/mirrorlist
        sed -i "s/^.*TITLE=.*/  TITLE=\"Manjaro Linux Installation Framework (v${version})\"/g" ${work_dir}/overlay/etc/manjaro/setup
        #chmod -R 755 ${work_dir}/overlay/home
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Process isomounts
make_isomounts() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Process isomounts \n $_n"
        sed "s|@ARCH@|${arch}|g" isomounts > ${work_dir}/iso/${install_dir}/isomounts
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Build ISO
make_iso() {
        echo -e -n "$_r >$_W Build ISO \n $_n"
        mkiso "${verbose}" "${overwrite}" -D "${install_dir}" -L "${iso_label}" -a "${arch}" -c "${compression}" "${high_compression}" iso "${work_dir}" "${name}${de}-${version}-${arch}.iso"
        echo -e "$_g >$_W done $_n"
}

if [[ $verbose == "y" ]]; then
    verbose="-v"
else
    verbose=""
fi

if [[ $overwrite == "y" ]]; then
    overwrite="-f"
else
    overwrite=""
fi

if [[ $high_compression == "y" ]]; then
    high_compression="-x"
else
    high_compression=""
fi

# create trustdb
create_trustdb
# install basic
make_root_image
# install xorg-drivers
if [ -e Packages-Xorg ] ; then
    make_pkgs_image
fi
# install translations
if [ -e Packages-Lng ] ; then
    make_lng_image
fi
# install DE(s)
if [ -e Packages-Xfce ] ; then
    make_xfce_image
fi
if [ -e Packages-Kde ] ; then
    make_kde_image
fi
if [ -e Packages-gnome ] ; then
    make_gnome_image
fi
if [ -e Packages-Openbox ] ; then
    make_openbox_image
fi
if [ -e Packages-Lxde ] ; then
    make_lxde_image
fi
# install common
make_boot
make_efi
make_efiboot
make_syslinux
make_isolinux
make_overlay
make_isomounts
make_iso
